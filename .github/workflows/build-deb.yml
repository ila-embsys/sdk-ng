name: build-deb

on:
  push:

jobs:
  # Cancel job is setup to not cancel jobs associated with
  # a tag (ie a release).  Also we run it on ubuntu in the
  # hopes that if the macos builders are full that it can
  # still run
  cancel:
    runs-on: "ubuntu-latest"
    steps:
      - name: "Cancel Previous Runs"
        uses: styfle/cancel-workflow-action@0.9.0
        if: ${{ !startsWith(github.ref, 'refs/tags/') && !env.ACT}}
        with:
          access_token: ${{ github.token }}

  # Crosstool job builds crosstool so we
  # only do that once per toolchain, and preloads the crosstool with
  # the sources so we only download them once.
  #
  # NOTES:
  # - uses 'go.sh cmake' as a way to easily just build crosstool
  # - to download sources we use arm.config and utilize setting
  #   CT_ONLY_DOWNLOAD in the env plus invoking crosstool with
  #   a STOP=companion_libs_for_build condition.
  crosstool:
    needs: cancel
    runs-on: ${{ matrix.host }}
    strategy:
      matrix:
        host: [
          "ubuntu-latest",
        ]
    steps:
      - name: create non-root user
        if: ${{ env.ACT }}
        run: |
          useradd -m build || exit 0
      - name: "clone"
        uses: actions/checkout@v2
      - name: "prereq"
        run:
          sudo apt-get update && sudo apt-get install -y --no-install-recommends flex texinfo help2man libtool-bin bison byacc
      - name: Cache CrossTool
        id: cache-crosstool
        if: ${{ !env.ACT }}
        uses: actions/cache@v2
        with:
          path: .
          key: ${{ runner.os }}-crosstool-${{ hashFiles('./go.sh') }}
      - name: "build ct-ng"
        if: steps.cache-crosstool.outputs.cache-hit != 'true'
        run: |
          ./go.sh crosstool
          ./go.sh cmake
      - name: "preload sources"
        if: steps.cache-crosstool.outputs.cache-hit != 'true'
        run: |
          export GITDIR=${PWD}
          export SDK_NG_HOME=${PWD}
          export CT_NG=${SDK_NG_HOME}/bin/ct-ng
          export CT_PREFIX=${SDK_NG_HOME}/build/output/
          export CT_ONLY_DOWNLOAD=y
          mkdir -p ${SDK_NG_HOME}/build/dummy
          cd ${SDK_NG_HOME}/build/dummy
          # su - build -c "$CT_NG defconfig DEFCONFIG=${GITDIR}/configs/arm.config"
          ${{ env.ACT && 'su - build -c "$CT_NG defconfig DEFCONFIG=${GITDIR}/configs/arm.config"' || '$CT_NG defconfig DEFCONFIG=${GITDIR}/configs/arm.config' }}
          # sudo -s -u build bash -c "$CT_NG defconfig DEFCONFIG=${GITDIR}/configs/arm.config"
          # su - build -c "$CT_NG build STOP=companion_libs_for_build"
          ${{ env.ACT && 'su - build -c "$CT_NG build STOP=companion_libs_for_build"' || '$CT_NG build STOP=companion_libs_for_build' }}
          # sudo -s -u build bash -c "$CT_NG build STOP=companion_libs_for_build"
          cd ${GITDIR}
          rm -fr ${CT_PREFIX}/arm-zephyr-eabi
          rm -fr ${SDK_NG_HOME}/build/dummy
      # - name: "upload cmake"
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: cmake.linux.x86_64.tar.bz2
      #     path: cmake.linux.x86_64.tar.bz2
      - name: pack artifact
        # use split archive
        # othervise when using act with artifact-server
        # the server fails on lage files with
        # Error: unexpected end of file
        # at Zlib.zlibOnError [as onerror] (node:zlib:190:17)
        run: |
          rm -rf /tmp/crosstool.tar*
          tar cf - . | split -b 5m - /tmp/crosstool.tar
      - name: "upload ct-ng"
        uses: actions/upload-artifact@v2
        with:
          name: crosstool
          path: /tmp/crosstool.tar*

  # Build the actual toolchains.  This will publish artifacts for the
  # toolchain builds and build logs
  toolchains:
    needs: crosstool
    runs-on: ${{ matrix.host }}
    strategy:
      matrix:
        host: [
          "ubuntu-latest",
        ]
        arch: [
          "arm",
          # "arc",
          # "riscv64",
          # "nios2",
          # "sparc",
          # "x86_64-zephyr-elf",
          # "arm64",
          # "xtensa_sample_controller",
          # "xtensa_intel_apl_adsp",
          # "xtensa_intel_bdw_adsp",
          # "xtensa_intel_byt_adsp",
          # "xtensa_nxp_imx_adsp",
          # "xtensa_nxp_imx8m_adsp",
          # "xtensa_intel_s1000",
          # "mips",
        ]
    steps:
      - name: "download ct-ng"
        uses: actions/download-artifact@v2
        with:
          name: crosstool
      - name: "prereq"
        run:
          sudo apt-get update && sudo apt-get install -y --no-install-recommends flex texinfo help2man libtool-bin bison byacc python3-dev python3-pip
      - name: unpack artifact
        run: |
          # ls -la
          cat crosstool.tar* | tar xf -
          rm crosstool.tar*
      - name: create non-root user
        if: ${{ env.ACT }}
        run: |
          useradd -m build || exit 0
      - name: "build ${{ matrix.arch }} for ${{ matrix.host }}"
        run: |
          export GITDIR=${PWD}
          export SDK_NG_HOME=${PWD}
          export CT_NG=${SDK_NG_HOME}/bin/ct-ng
          export CT_PREFIX=${SDK_NG_HOME}/build/output/
          # sudo -s -u build "./go.sh ${{ matrix.arch }}"
          # chmod 777 ${SDK_NG_HOME}
          # chmod -R 777 ${SDK_NG_HOME}/build/
          # sudo -s -u build bash -c "./go.sh ${{ matrix.arch }}"
          ${{ env.ACT && format('sudo -s -u build bash -c "./go.sh {0}"', matrix.arch) || format('./go.sh {0}', matrix.arch) }}
          ls -lstr
      - name: "upload build log"
        uses: actions/upload-artifact@v2 
        with:
          name: "${{ matrix.arch }}.${{ matrix.host }}.log"
          path: ./build/output/build.*.log.bz2
      - name: "split archive"
        run: |
          rm -rf /tmp/${{ matrix.arch }}.linux.x86_64.tar.bz2*
          split -b 5m ${{ matrix.arch }}.linux.x86_64.tar.bz2 /tmp/${{ matrix.arch }}.linux.x86_64.tar.bz2
      - name: "upload toolchain tarball"
        uses: actions/upload-artifact@v2
        with:
          name: "${{ matrix.arch }}.linux.x86_64.tar.bz2"
          path: /tmp/${{ matrix.arch }}.linux.x86_64.tar.bz2*

  package-deb:
    needs: toolchains
    runs-on: ${{ matrix.host }}
    env:
      MAINTAINER_NAME: Unknown Maintainer
      MAINTAINER_EMAIL: unknown@maintainer.email
    strategy:
      matrix:
        host: [
          "ubuntu-latest",
        ]
        arch: [
          "arm",
          # "arc",
          # "riscv64",
          # "nios2",
          # "sparc",
          # "x86_64-zephyr-elf",
          # "arm64",
          # "xtensa_sample_controller",
          # "xtensa_intel_apl_adsp",
          # "xtensa_intel_bdw_adsp",
          # "xtensa_intel_byt_adsp",
          # "xtensa_nxp_imx_adsp",
          # "xtensa_nxp_imx8m_adsp",
          # "xtensa_intel_s1000",
          # "mips",
        ]
    steps:
      - name: "download ct-ng"
        uses: actions/download-artifact@v2
        with:
          name: "${{ matrix.arch }}.linux.x86_64.tar.bz2"
      - name: "unpack"
        run: |
          cat ${{ matrix.arch }}.linux.x86_64.tar.bz2* | tar -xjf -
      - name: prepare directories and package
        run: |
          mkdir -p ${{ matrix.arch }}-zephyr-eabi_1.0-1
          mkdir -p ${{ matrix.arch }}-zephyr-eabi_1.0-1/DEBIAN
          echo "Package: ${{ matrix.arch }}-zephyr-eabi
          Version: 1.0-1
          Section: devel
          Priority: optional
          Architecture: amd64
          Maintainer: ${{ env.MAINTAINER_NAME }} <${{ env.MAINTAINER_EMAIL }}>
          Description: ${{ matrix.arch }}-zephyr-eabi toolchain with enabled Ada lang" > ${{ matrix.arch }}-zephyr-eabi_1.0-1/DEBIAN/control
      - name: unpack toolchain
        run: |
          cd ${{ matrix.arch }}-zephyr-eabi_1.0-1
          cat ../${{ matrix.arch }}.linux.x86_64.tar.bz2* | tar -xjf -
      - name: build deb
        run: |
          dpkg-deb --build ${{ matrix.arch }}-zephyr-eabi_1.0-1
      - name: "upload deb package"
        uses: actions/upload-artifact@v2
        with:
          name: deb-package
          path: ${{ matrix.arch }}-zephyr-eabi_1.0-1.deb
